#====================================================================#
# Template file: ADPandABlocksEnc.template
# Macros:
# % macro, MOTOR, pv of motor record
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, ENC_IND, index for motor
# % macro, DIR, motor direction + for positive - for negative
# % macro, MULT, scale factor multiply
#------


record(calcout, "$(P)$(R)INENC$(ENC_IND):SCALECALC") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "$(MOTOR).ERES CP")
  field(INPB, "$(MOTOR).DIR CP")
  field(INPC, "$(MOTOR):SCALE CP")
  field(INPD, "$(DIR=+)$(MULT=1)")
  field(OUT,  "$(P)$(R)INENC$(ENC_IND):SCALE PP")
  field(PREC, "4")
}

record(calcout, "$(P)$(R)INENC$(ENC_IND):OFFCALC") {
  field(CALC, "A")
  field(INPA, "$(MOTOR).OFF CP")
  field(OUT,  "$(P)$(R)INENC$(ENC_IND):OFF PP")
  field(PREC, "4")
}

record(stringout, "$(P)$(R)INENC$(ENC_IND):UNITSCALC") {
  field(OUT,  "$(P)$(R)INENC$(ENC_IND):UNITS PP")
  field(DOL, "$(MOTOR).EGU CP")
  field(OMSL, "closed_loop")
}

record(calcout, "$(P)$(R)INENC$(ENC_IND):SDISTRANS") {
  field(DESC, "Trigger seq when SDIS trans to Zero")
  field(CALC, "A")
  field(INPA, "$(MOTOR):SDIS.A CP")
  field(OOPT, "Transition To Zero")
  field(OUT, "$(P)$(R)INENC$(ENC_IND):ONENABLE.PROC")
}

record(seq, "$(P)$(R)INENC$(ENC_IND):ONENABLE") {
  field(DESC, "1s after motor enabled, call setpos")
  field(DOL1, "1")
  field(LNK1, "$(P)$(R)INENC$(ENC_IND):SETPOS.PROC PP")
  field(DLY1, "$(M1HOMESETTLE=5)")
}

# % archiver 10 Monitor
record(calcout, "$(P)$(R)INENC$(ENC_IND):SETPOSCALC") {
  field(CALC, "A*(B>0?B:1)")
  field(INPA, "$(MOTOR).REP") #WRITES TO THE MOTOR RECORD VAL IN COUNTS INSTEAD OF :RBV
  field(INPB, "$(MOTOR):SCALE")
  field(OUT, "$(P)$(R)INENC$(ENC_IND):SETPOS PP")
}

record(ao, "$(P)$(R)INENC$(ENC_IND):SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0)INENC$(ENC_IND):SETPOS")
}
record(ao, "$(P)$(R)INENC$(ENC_IND):SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0)INENC$(ENC_IND):SCALE")
}

record(ao, "$(P)$(R)INENC$(ENC_IND):OFF") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),0)INENC$(ENC_IND):OFF")
}

record(stringout, "$(P)$(R)INENC$(ENC_IND):UNITS") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn($(PORT),0)INENC$(ENC_IND):UNITS")
}
